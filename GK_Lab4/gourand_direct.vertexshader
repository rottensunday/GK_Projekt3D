#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 vertexTangent_modelspace;
layout(location = 4) in vec3 vertexBitangent_modelspace;

out vec2 UV;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

out vec3 LightDirection_tangentspace;
out vec3 EyeDirection_tangentspace;

out vec4 ShadowCoord;
out vec4 Position_cameraspace;

out mat4 TBN;

out vec3 col;


struct directional_light_info {
	vec3 position; // the direction will always be: from position to (0,0,0)
	vec3 light_color;
	float light_power;
};


uniform sampler2DShadow shadowMap;
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform sampler2D texture_normal1;
uniform sampler2D texture_height1;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 LightPosition_worldspace;
uniform directional_light_info directional_light;
uniform bool isBlinn;
uniform bool fogEnabled;
uniform float fogNear;
uniform float fogFar;

uniform mat4 DepthBiasMVP;

float FogEyePlane(vec4 Rh)
{
	float z = abs(Rh.z / Rh.w);
	return clamp((z - 0.9), 0.0, 1.0);
}

void main(){
	gl_Position = projection * view * model * vec4(vertexPosition_modelspace, 1);
	Position_worldspace = (model * vec4(vertexPosition_modelspace,1)).xyz;
	vec3 vertexPosition_cameraspace = ( view * model * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	vec3 LightPosition_worldspace = directional_light.position;

	vec3 LightPosition_cameraspace = ( view * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	UV = vertexUV;

	mat3 modelview = mat3(model*view);

	vec3 vertexTangent_cameraspace = modelview*vertexTangent_modelspace;
	vec3 vertexBitangent_cameraspace = modelview*vertexBitangent_modelspace;
	vec3 vertexNormal_cameraspace = modelview*vertexNormal_modelspace;

	mat3 TBN = transpose(mat3(
		vertexTangent_cameraspace,
		vertexBitangent_cameraspace,
		vertexNormal_cameraspace	
	));

	LightDirection_tangentspace = TBN * LightDirection_cameraspace;
	EyeDirection_tangentspace =  TBN * EyeDirection_cameraspace;

	ShadowCoord = DepthBiasMVP * vec4(vertexPosition_modelspace,1);
	Position_cameraspace = view * model * vec4(vertexPosition_modelspace,1);



	vec3 LightColor = directional_light.light_color;
	float LightPower = directional_light.light_power;

	vec3 MaterialDiffuseColor = texture(texture_diffuse1, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.03,0.03,0.03) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texture(texture_specular1, UV).rgb * 0.3;

	vec3 TextureNormal_tangentspace = normalize(texture( texture_normal1, vec2(UV.x, UV.y) ).rgb*2.0 - 1.0);

	vec3 n = TextureNormal_tangentspace;

	vec3 l = normalize(LightDirection_tangentspace);
	float cosTheta = clamp(dot(n,l),0,1);
	float cosAlpha;
	if(isBlinn){
		vec3 halfDir = normalize(LightDirection_tangentspace + EyeDirection_tangentspace);
		cosAlpha = clamp(dot(halfDir, n), 0, 1);
	}
	else{
		vec3 E = normalize(EyeDirection_tangentspace);
		vec3 R = reflect(-l,n);
		cosAlpha = clamp(dot(E,R), 0, 1);
	}
	float bias = 0.005*tan(acos(cosTheta)); // cosTheta is dot( n,l ), clamped between 0 and 1
	bias = clamp(bias, 0,0.01);

	float visibility = texture( shadowMap, vec3(ShadowCoord.xy, (ShadowCoord.z - bias)/ShadowCoord.w ));
	if(visibility < 0.1) visibility = 0.5;
	else visibility = 1.0;
	if(fogEnabled)
	{
		float dist = length(Position_cameraspace);
		float fogFactor = (fogFar - dist)/(fogFar - fogNear);
		fogFactor = clamp( fogFactor, 0.0, 1.0 );
		col = MaterialAmbientColor + 
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta +
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
		col = mix(vec3(0.3,0.3,0.3), col, fogFactor);
	}
	else
	{
		col = MaterialAmbientColor + 
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta +
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
	}
}