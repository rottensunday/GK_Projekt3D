#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 vertexTangent_modelspace;
layout(location = 4) in vec3 vertexBitangent_modelspace;

out vec2 UV;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

out vec3 LightDirection_tangentspace;
out vec3 EyeDirection_tangentspace;

out vec4 ShadowCoord;
out vec4 Position_cameraspace;

out mat4 TBN;


struct directional_light_info {
	vec3 position; // the direction will always be: from position to (0,0,0)
	vec3 light_color;
	float light_power;
};

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 DepthBiasMVP;
uniform directional_light_info directional_light;

float FogEyePlane(vec4 Rh)
{
	float z = abs(Rh.z / Rh.w);
	return clamp((z - 0.9), 0.0, 1.0);
}

void main(){
	gl_Position = projection * view * model * vec4(vertexPosition_modelspace, 1);
	Position_worldspace = (model * vec4(vertexPosition_modelspace,1)).xyz;
	vec3 vertexPosition_cameraspace = ( view * model * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	vec3 LightPosition_worldspace = directional_light.position;

	vec3 LightPosition_cameraspace = ( view * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	UV = vertexUV;

	mat3 modelview = mat3(model*view);

	vec3 vertexTangent_cameraspace = modelview*vertexTangent_modelspace;
	vec3 vertexBitangent_cameraspace = modelview*vertexBitangent_modelspace;
	vec3 vertexNormal_cameraspace = modelview*vertexNormal_modelspace;

	mat3 TBN = transpose(mat3(
		vertexTangent_cameraspace,
		vertexBitangent_cameraspace,
		vertexNormal_cameraspace	
	));

	LightDirection_tangentspace = TBN * LightDirection_cameraspace;
	EyeDirection_tangentspace =  TBN * EyeDirection_cameraspace;

	ShadowCoord = DepthBiasMVP * vec4(vertexPosition_modelspace,1);
	Position_cameraspace = view * model * vec4(vertexPosition_modelspace,1);
}