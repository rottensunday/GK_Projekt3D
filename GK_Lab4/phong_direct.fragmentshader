#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

in vec4 ShadowCoord;
in vec4 Position_cameraspace;

in mat4 TBN;

layout(location = 0) out vec3 color;


struct directional_light_info {
	vec3 position; // the direction will always be: from position to (0,0,0)
	vec3 light_color;
	float light_power;
};


uniform sampler2DShadow shadowMap;
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform sampler2D texture_normal1;
uniform sampler2D texture_height1;
uniform mat4 model;
uniform mat4 view;
uniform vec3 LightPosition_worldspace;
uniform directional_light_info directional_light;
uniform bool isBlinn;
uniform bool fogEnabled;
uniform float fogNear;
uniform float fogFar;

void main(){
    vec3 LightColor = directional_light.light_color;
	float LightPower = directional_light.light_power;

	vec3 MaterialDiffuseColor = texture(texture_diffuse1, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.03,0.03,0.03) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texture(texture_specular1, UV).rgb * 0.3;

	vec3 TextureNormal_tangentspace = normalize(texture( texture_normal1, vec2(UV.x, UV.y) ).rgb*2.0 - 1.0);

	vec3 n = TextureNormal_tangentspace;

	vec3 l = normalize(LightDirection_tangentspace);
	float cosTheta = clamp(dot(n,l),0,1);
	float cosAlpha;
	if(isBlinn){
		vec3 halfDir = normalize(LightDirection_tangentspace + EyeDirection_tangentspace);
		cosAlpha = clamp(dot(halfDir, n), 0, 1);
	}
	else{
		vec3 E = normalize(EyeDirection_tangentspace);
		vec3 R = reflect(-l,n);
		cosAlpha = clamp(dot(E,R), 0, 1);
	}
	float bias = 0.005*tan(acos(cosTheta)); // cosTheta is dot( n,l ), clamped between 0 and 1
	bias = clamp(bias, 0,0.01);

	float visibility = texture( shadowMap, vec3(ShadowCoord.xy, (ShadowCoord.z - bias)/ShadowCoord.w ));
	if(visibility < 0.1) visibility = 0.5;
	else visibility = 1.0;
	if(fogEnabled)
	{
		float dist = length(Position_cameraspace);
		float fogFactor = (fogFar - dist)/(fogFar - fogNear);
		fogFactor = clamp( fogFactor, 0.0, 1.0 );
		color = MaterialAmbientColor + 
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta +
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
		color = mix(vec3(0.3,0.3,0.3), color, fogFactor);
	}
	else
	{
		color = MaterialAmbientColor + 
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta +
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
	}
}